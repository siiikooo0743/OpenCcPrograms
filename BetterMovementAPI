x = 0
y = 0
z = 0
f = 0
hx = 0
hy = 0
hz = 0
hf = 0
directory = "BetterMovementAPI"

function setPos(_x, _y, _z, _f)
  x = _x
  y = _y
  z = _z
  f = _f
  saveCoords()
end

function setHome(_x, _y, _z, _f)
  hx = _x
  hy = _y
  hz = _z
  hf = _f
  saveHome()
end

function setHomeH()
  loadPos()
  hx = x
  hy = y
  hz = z
  hf = f
  saveHome()
end

function turnTo(_f)
  loadPos()
  if _f > 3 then return end
  
  local dif = f - _f
  
  print("target:".._f..";actual:"..f..";diff:"..dif)
  if dif > 2 then
    dif = dif - 4
  end
  
  if dif < -2 then
    dif = dif + 4
  end
  print("shortest:"..dif)
  
  if dif > 0 then
    for i = 0, dif , 1 do
      turnL()
    end
  elseif dif < 0 then
    for i = 0, dif , 1 do
      turnR()
    end
  end
end

function turnR()
  loadPos()
  f = f + 1
  if(f == 4)then
    f = 0
  end
  turtle.turnRight()
  saveCoords()
end

function turnL()
  loadPos()
  f = f - 1
  if(f == -1)then
    f = 3
  end
  turtle.turnLeft()
  saveCoords()
end

local function goFor(_mine)
  if _mine then
    turtle.dig()
  end
  local worked = turtle.forward()
  if worked then
    if f == 0 then
      z = z + 1
    end
    
    if f == 1 then
      x = x - 1
    end
    
    if f == 2 then
      z = z - 1
    end
    
    if f == 3 then
      x = x + 1
    end
  end
  return worked
end

local function goBack(_mine)
  if _mine then
    turtle.dig()
  end
  local worked = turtle.back()
  if worked then
    if f == 0 then
      z = z - 1
    end
    
    if f == 1 then
      x = x + 1
    end
    
    if f == 2 then
      z = z + 1
    end
      
    if f == 3 then
      x = x - 1
    end
  end
  return worked
end

local function goUp(_mine)
  if _mine then
    turtle.digUp()
  end
  local worked = turtle.up()
  if worked then
    y = y + 1
  end
  return worked
end

local function goDown(_mine)
  if _mine then
    turtle.digDown()
  end
  local worked = turtle.down()
  if worked then
    y = y - 1
  end
  return worked
end

local function move(_direct, _mine)
  loadPos()
  if _direct == "for" then
    if(not goFor(_mine)) then
      print("Stuck...")
      while(not goFor(_mine)) do
        turtle.attack()
      end
    end
  end
  
  if _direct == "back" then
    if(not goBack()) then
      print("Stuck...")
      while(not goBack()) do
        turtle.attack()
      end
    end
  end
  
  if _direct == "up" then
    if(not goUp()) then
      print("Stuck...")
      while(not goUp()) do
        turtle.attack()
      end
    end
  end
  
  if _direct == "down" then
    if(not goDown()) then
      print("Stuck...")
      while(not goDown()) do
        turtle.attack()
      end
    end
  end
  saveCoords()
end

function go(_direction, _dist, _mine)
    
  if _direction == "right" then
    turnR()
  end
  
  if _direction == "left" then
   turnL()
  end
  
  for i = 1, _dist, 1 do
  
    if _direction == "for" then
      move("for", _mine)
    end
    
    if _direction == "back" then
     move("back", _mine)
    end
    
    if _direction == "left" then
      move("for", _mine)
    end
    
    if _direction == "right" then
      move("for", _mine)
    end
    
    if _direction == "up" then
      move("for", _mine)
    end
    
    if _direction == "down" then
      move("for", _mine)
    end
  end
end

function goTo(_x, _y, _z, _f)
  local arrived = false
  local needY = false
  print("x:"..x..";y:"..y..";z:"..z..";f:"..f)
  print("_x:".._x..";_y:".._y..";_z:".._z..";_f:".._f)
  while not arrived do
    if (not turtle.detect()) or needY then
      if _z > z then
	turnTo(0)
	go("for", 1, false)
	if _z == z then
	  if _x > x then
	    turnTo(3)
	  elseif _x < x then
	    turnTo(1)
	  end
	end
      elseif _z < z then
	turnTo(2)
	go("for", 1, false)
	if _z == z then
	  if _x > x then
	    turnTo(3)
	  elseif _x < x then
	    turnTo(1)
	  end
	end
      else
	if _x > x then
	  turnTo(3)
	  go("for", 1, false)
	  if _x == x then
	    needY = true
	  end
	elseif _x < x then
	  turnTo(1)
	  go("for", 1, false)
	  if _x == x then
	    needY = true
	  end
	else
	  if _y > y then
	    go("up", 1, false)
	  elseif _y < y then
	    go("for", 1, false)
	  else
	    arrived = true
	  end
	end
      end
    else
      if not turtle.detectUp() then
	go("up", 1, false)
      else
	if not turtle.detectDown() then
	  go("down", 1, false)
	else
	  print("STUCK")
	  while true do
	    sleep(10)
	  end
	end
      end
    end
  end
  turnTo(_f)
end

function goHome()
  loadHome()
  goTo(hx, hy, hz, hf)
end

function saveCoords()
  if(not fs.isDir(directory)) then
    fs.makeDir(directory)
  end
  
  local File = fs.open(directory.."/Coords", "w")
  File.writeLine(x)
  File.writeLine(y)
  File.writeLine(z)
  File.writeLine(f)
  File.close()
end

function saveHome()
  if(not fs.isDir(directory)) then
    fs.makeDir(directory)
  end
  
  local File = fs.open(directory.."/Home", "w")
  File.writeLine(hx)
  File.writeLine(hy)
  File.writeLine(hz)
  File.writeLine(hf)
  File.close()
end

function loadPos()
  if(not fs.exists(directory .. "/Pos")) then 
    return false 
  end
  
  local File = fs.open(directory .. "/pos", "r")
  x = tonumber(File.readLine())
  y = tonumber(File.readLine())
  z = tonumber(File.readLine())
  f = tonumber(File.readLine())
  
  return true
end

function loadHome()
  if(not fs.exists(directory .. "/Home")) then 
    return false 
  end
  
  local File = fs.open(directory .. "/Home", "r")
  hx = tonumber(File.readLine())
  hy = tonumber(File.readLine())
  hz = tonumber(File.readLine())
  hf = tonumber(File.readLine())
  
  return true
end

