--[[
  AdvancedMonitorProgram
  
  This is a modified version of the monitor program delivered with CC, to be able to change the textscale.
  It is supposed to be renamed and replace the existing monitor file.
  
  Author of the modifications: siiikooo0743
  
]]

function printUsage()
	print( "Usage: monitor [size] [<TextSize>] <name/side> <program> <arguments>" )
	return
end

local tArgs = { ... }
if #tArgs < 2 then
	printUsage()
	return
end

local size = 1.0
local sName = tArgs[1]
local sProgram = tArgs[2]

if tArgs[1] == "size" then
	if #tArgs < 4 then
		printUsage()
		return
	end
	size = tArgs[2]
	sName = tArgs[3]
	sProgram = tArgs[4]
	sizeE = true
end

if peripheral.getType( sName ) ~= "monitor" then
	print( "No monitor named ".. sName )
	return
end

local sPath = shell.resolveProgram( sProgram )
if sPath == nil then
	print( "No such program: "..sProgram )
	return
end

print( "Running "..sProgram.." on monitor "..sName )

local monitor = peripheral.wrap( sName )
monitor.setTextScale(size)
local previousTerm = term.redirect( monitor )

if sizeE then
	local co = coroutine.create( function()
    shell.run( sProgram, unpack( tArgs, 5 ) )
	end )
else
	local co = coroutine.create( function()
    shell.run( sProgram, unpack( tArgs, 3 ) )
	end )
end


local function resume( ... )
    local ok, param = coroutine.resume( co, ... )
    if not ok then
    	printError( param )
    end
    return param
end

local ok, param = pcall( function()
	local sFilter = resume()
	while coroutine.status( co ) ~= "dead" do
		local tEvent = { os.pullEventRaw() }
		if sFilter == nil or tEvent[1] == sFilter or tEvent[1] == "terminate" then
			sFilter = resume( unpack( tEvent ) )
		end
		if coroutine.status( co ) ~= "dead" and (sFilter == nil or sFilter == "mouse_click") then
			if tEvent[1] == "monitor_touch" and tEvent[2] == sName then
				sFilter = resume( "mouse_click", 1, unpack( tEvent, 3 ) )
			end
		end
		if coroutine.status( co ) ~= "dead" and (sFilter == nil or sFilter == "term_resize") then
			if tEvent[1] == "monitor_resize" and tEvent[2] == sName then
				sFilter = resume( "term_resize" )
			end
		end
	end
end )

term.redirect( previousTerm )
if not ok then
	printError( param )
end
	
