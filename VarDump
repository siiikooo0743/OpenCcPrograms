--[[ 
 Var Dump 
 Copied from http://www.lua.org/gems/vardump.lua
 Added varDumpToScreen
]]

function writeLnToMonitor(m, text)
 m.write(text)
 x,y = m.getCursorPos()
 m.setCursorPos(1,y+2)
end

function vardump(value, depth, key)
  local linePrefix = ""
  local spaces = ""
  
  if key ~= nil then
    linePrefix = "["..key.."] = "
  end
  
  if depth == nil then
    depth = 0
  else
    depth = depth + 1
    for i=1, depth do spaces = spaces .. "  " end
  end
  
  if type(value) == 'table' then
    mTable = getmetatable(value)
    if mTable == nil then
      print(spaces ..linePrefix.."(table) ")
    else
      print(spaces .."(metatable) ")
        value = mTable
    end		
    for tableKey, tableValue in pairs(value) do
      vardump(tableValue, depth, tableKey)
    end
  elseif type(value)	== 'function' or 
      type(value)	== 'thread' or 
      type(value)	== 'userdata' or
      value		== nil
  then
    print(spaces..tostring(value))
  else
    print(spaces..linePrefix.."("..type(value)..") "..tostring(value))
  end
end

function varDumpToScreen(monitor, value, depth, key)
 width, height = monitor.getSize()
 monitor.setTextScale(0.5)
 
 local linePrefix = ""
  local spaces = ""
  
  if key ~= nil then
    linePrefix = "["..key.."] = "
  end
  
  if depth == nil then
    depth = 0
  else
    depth = depth + 1
    for i=1, depth do spaces = spaces .. "  " end
  end
  
  if type(value) == 'table' then
    mTable = getmetatable(value)
    if mTable == nil then
     writeLnToMonitor(monitor, spaces ..linePrefix.."(table) ")
    else
      print(spaces .."(metatable) ")
        value = mTable
    end		
    for tableKey, tableValue in pairs(value) do
       varDumpToScreen(monitor, tableValue, depth, tableKey)
    end
  elseif type(value)	== 'function' or 
      type(value)	== 'thread' or 
      type(value)	== 'userdata' or
      value		== nil
  then
    valueS = tostring(value)
    len = string.len(valueS)
    lenSpaces = string.len(spaces)
    printed = 0
    
    while len > printed do
      charsToPrint = (width - lenSpaces -2)
      toPrint = string.sub(valueS,printed + 1, (printed + 1) + charsToPrint)
      printed = printed + charsToPrint
      writeLnToMonitor(monitor, spaces..toPrint)
    end

  else
    valueS = tostring(linePrefix.."("..type(value)..") "..tostring(value))
    len = string.len(valueS)
    lenSpaces = string.len(spaces)
    printed = 0
    
    while len > printed do
      charsToPrint = (width - lenSpaces -2)
      toPrint = string.sub(valueS,printed + 1, (printed + 1) + charsToPrint)
      printed = printed + charsToPrint
      writeLnToMonitor(monitor, spaces..toPrint)
    end
  
    writeLnToMonitor(monitor, spaces..toPrint)
  end
 
end
