--[[
	RunicAltarAutomation
	
	Copyright (C) 2015 siiikooo0743
	
	This programm is part of the OpenCcPrograms-project and licensed under the GPLv3, 
	see LicenseDetails for more details and LICENSE for the complete license.
	
	Author: siiikooo0743
	Website: https://github.com/siiikooo0743/OpenCcPrograms
	
	This program is designed to automate the Botania Runic Altar.
	It requires the StringApiExtend to be loaded(already os.loadAPI()).
	
	In World setup:
	
	A Runic Altar with an AirBlock above it and an Open Crate above that, a hopper facing into the Open Crate,
	a chest for all Items below and a turtle facing the altar below that.
	Additionaly a BC Gate set to Space for Mana and redstone-signale facing the altar and a redstone wire of kinds connecting it to the left of the turtle. 
	The turtle needs to have a wand of the forest.
	
	OC Ho
	Ai Ch -> that is looking at it from the side without the gate
	RA Tu 
	
	The .dn folder is there to store any displayName-id combinations already registered.
	
	Recipes go in the recipes folder and have the name of the item as their name.
	Their content contains the recipe.
	The file name is: The id, a ":" and the damageValue.
	Due to restrictions in computercraft every ":" needs to be replaced with "_", that includes any that may occur in the id.
	At the start of the file the amount being crafted each time is noted continued by a ";"
	Each item is: The id, a ":", the damageValue, a "?", and the amount.
	The different Items seperated by ";".
	
	Example:
	
	"recipes/Botania_rune_8":
	"1;manaResource:0?5;manaResource:1?1
	
]]

tArgs = {...}
chest = peripheral.wrap("top")
fs.makeDir("recipes")
fs.makeDir(".dn")

function printUsage()
	print("Usage:")
	print("RAA help -> Print this help page.")
	print("RAA getName <slot> -> Print the name of the item in slot.")
	print("RAA addRecipe <slot_item> <slots_ingredients> -> Adds the recipe for item with ingredients, wich need to be seperated by >>;<<.")
	print("RAA make <amount> <item> -> Trys to craft the item, item is specified by display name")
	print("RAA makeId <amount> <item> -> Trys to craft the item, item is specified by id")
end

function printError(cause)
	print(cause)
	print("Please type >>RAA help<< for help")
end

function registerDn(name, id)
	local path = ".dn/" .. name
	if not (fs.exists(path)) then
		local f = fs.open(path, "w")
		f.write(id)
		f.close()
	end
end

function getIdFromDn(name)
	local path = ".dn/" .. name
	if (fs.exists(path)) then
		local f = fs.open(path, "r")
		local id = f.readAll()
		f.close()
		return(id)
	end
	return("")
end

function scan()
	local stacks = chest.getAllStacks()
	for _,slot in pairs(stacks) do
		registerDn(slot["display_name"], slot["id"] .. ":" .. slot["dmg"])
	end
end

function findItem(idDmg)
 	chest.condenseItems()
 	local stacks = chest.getAllStacks()
 	
 	for slot,stack in pairs(stacks) do
 		local id = stack["id"] .. ":" .. stack["dmg"]
 		if(id == idDmg) then
 			return slot, stack["qty"]
 		end
 	end
 	return 0, 0
end

function craft(items)
	local totalAmount = 0
	for slot,amount in pairs(items) do
		chest.pushItem("up", slot, amount)
		totalAmount = totalAmount + amount
		sleep(0.4)
	end
	sleep(2)
	turtle.select(1)
	turtle.place()
	sleep(1)
	while rs.getInput("left") do
		sleep(1)
	end
	local slot, amount = findItem("Botania:livingrock:0")
	while(amount == 0) do
		print("Item not found:livingrock:0")
		print("Press any key to continue...")
		os.pullEvent("key")
		slot, amount = findItem("Botania:livingrock:0")
	end
	
	chest.pushItem("up", slot, 1)
	sleep(2)
	turtle.place()
	sleep(6)
	turtle.select(2)
	while(table.getn(chest.getAllStacks) > 0 ) do
		turtle.suck()
		turtle.dropUp()
	end
	turtle.select(1)
end

function main(idDmg, amount, useItemsInChest)
	local path = "recipes/" .. idDmg
	path = string.gsub(path, ":", "_")
	local slot, amountFound = findItem(idDmg)
	
	if(useItemsInChest and (amountFound >= amount)) then
		
	elseif (fs.exists(path)) then
		local amountToMake = amount
		if useItemsInChest then amountToMake = amount - amountFound end
		
		local f = fs.open(path, "r")
		local sA = f.readAll()
		f.close()
		
		local amountPerCraft = tonumber(string.sub(sA, 1,1))
		local recipe = string.sub(sA, 3, string.len(sA))
		
		local items = string.split(recipe, ";")
		local slots={}
		
		for i = 1, math.ceil(amountToMake / amountPerCraft), 1 do
			for _,item in pairs(items) do
				local parts = string.split(item, "?")
				local amountNeed = tonumber(parts[2])
				main(parts[1], amountNeed, true)
				
				local slot, amountFound = findItem(parts[1])
				slots[slot] = amountNeed
			end
			craft(slots)
		end
		
		
	else
		print("Item not found:" .. idDmg)
		print("Press any key to continue...")
		os.pullEvent("key")
		main(idDmg, amount, useItemsInChest)
	end
end

--Start

scan()

if(#tArgs < 1) then
	printError("To few arguments")
	return
end

if(tArgs[1] == "help") then
	printUsage()
	return
end

if(tArgs[1] == "getName") then
	if not (#tArgs == 2) then
		printError("Need exactly 2 arguments")
		return
	end
	stack = chest.getStackInSlot(tonumber(tArgs[2]))
	print("Id:" .. stack["id"] .. ":" .. stack["dmg"])
	print("DisplayName:" .. stack["display_name"])
	return
end

if(tArgs[1] == "addRecipe") then
	if not (#tArgs == 3) then
		printError("Need exactly 3 arguments")
		return
	end
	stackI = chest.getStackInSlot(tonumber(tArgs[2]))
	name = "recipes/".. stackI["id"] .. ":" .. stackI["dmg"]
	name = string.gsub(name, ":", "_")
	file = fs.open(name , "w")
	text = stackI["qty"] .. ";"
	
	
	
	slots = string.split(tArgs[3], ";")
	
	for _,value in pairs(slots) do
		stack = chest.getStackInSlot(tonumber(value))
		text = text .. stack["id"] .. ":" .. stack["dmg"] .. "?" .. stack["qty"] .. ";"
	end
	
	text = string.sub(text, 1, string.len(text) - 1)
	
	file.write(text)
	file.close()
	return
end

if(tArgs[1] == "make") then
	if (#tArgs < 3) then
		printError("Needs at least 3 arguments")
		return
	end
	
	name = ""
	
	for i = 3, #tArgs, 1 do
		name = name .. tArgs[i] .. " "
	end
	
	name = string.sub(name, 1, string.len(name) - 1)
	
	id = getIdFromDn(name)
	if(id == "") then
		print("This item is not registered yet.")
		print("Put it in the chest and run anything to do so.")
		print("Or just use the >>makeId<< function")
		return
	end
	main(id, tonumber(tArgs[2]), false)
	return
end

if(tArgs[1] == "makeId") then
	if (#tArgs < 3) then
		printError("Needs at least 3 arguments")
		return
	end
	main(tArgs[3], tonumber(tArgs[2]), false)
	return
end

printError("The first argument is wrong")
