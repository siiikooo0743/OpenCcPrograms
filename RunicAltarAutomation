--[[
	RunicAltarAutomation
	
	Copyright (C) 2015 siiikooo0743
	
	This programm is part of the OpenCcPrograms-project and licensed under the GPLv3, 
	see LicenseDetails for more details and LICENSE for the complete license.
	
	Author: siiikooo0743
	Website: https://github.com/siiikooo0743/OpenCcPrograms
	
	This program is designed to automate the Botania Runic Altar.
	It requires the StringApiExtend to be loaded(already os.loadAPI()).
	
	In World setup:
	
	A Runic Altar with an AirBlock above it and an Open Crate above that, a hopper facing into the Open Crate,
	a chest for all Items below and a turtle facing the altar below that.
	Additionaly a BC Gate set to Space for Mana and redstone-signale facing the altar and a redstone wire of kinds connecting it to the left of the turtle. 
	The turtle needs to have a wand of the forest.
	
	OC Ho
	Ai Ch -> that is looking at it from the side without the gatee
	RA Tu 
	
	The .dn folder is there to store any displayName-id combinations already registered.
	
	Recipes go in the recipes folder and have the name of the item as their name.
	Their content contains the recipe.
	The file name is: The id, a ":" and the damageValue.
	Due to restrictions in computercraft every ":" needs to be replaced with "_", that includes any that may occur in the id.
	Each item is: The id, a ":", the damageValue, a "%", and the amount.
	The different Items seperated by ";".
	
	Example:
	
	"recipes/Botania_rune_8":
	"manaResource:0%5;manaResource:1%1;
	
]]

tArgs = {...}
chest = peripheral.wrap("top")
fs.makeDir("recipes")
fs.makeDir(".dn")

function printUsage()
	print("Usage:")
	print("RAA help -> Print this help page.")
	print("RAA getName <slot> -> Print the name of the item in slot.")
	print("RAA addRecipe <slot_item> <slots_ingredients> -> Adds the recipe for item with ingredients, wich need to be seperated by >>;<<.")
	print("RAA make <item> -> Trys to craft the item, item is specified by display name")
	print("RAA makeId <item> -> Trys to craft the item, item is specified by id")
end

function printError(cause)
	print(cause)
	print("Please type >>RAA help<< for help")
end

function registerDN(name, id)
	print("register:" .. name)
	path = ".dn/" .. name
	if not (fs.exists(path)) then
		f = fs.open(path, "w")
		f.write(id)
		f.close()
	end
end

function scan()
	stacks = chest.getAllStacks()
	for _,slot in pairs(stacks) do
		registerDN(slot["display_name"], slot["id"] .. ":" .. slot["dmg"])
	end
end

function findItem(name)
 	
end

function main()
	
end

--Start

scan()

if(#tArgs < 1) then
	printError("To few arguments")
	return
end

if(tArgs[1] == "help") then
	printUsage()
	return
end

if(tArgs[1] == "getName") then
	if not (#tArgs == 2) then
		printError("Need exactly 2 arguments")
		return
	end
	stack = chest.getStackInSlot(tonumber(tArgs[2]))
	print("Id:" .. stack["id"] .. ":" .. stack["dmg"])
	print("DisplayName:" .. stack["display_name"] .. ":" .. stack["dmg"])
	return
end

if(tArgs[1] == "addRecipe") then
	if not (#tArgs == 3) then
		printError("Need exactly 3 arguments")
		return
	end
	stackI = chest.getStackInSlot(tonumber(tArgs[2]))
	name = "recipes/".. stackI["id"] .. ":" .. stackI["dmg"]
	name = string.gsub(name, ":", "_")
	file = fs.open(name , "w")
	text = ""
	
	slots = string.split(tArgs[3], ";")
	
	for _,value in pairs(slots) do
		stack = chest.getStackInSlot(tonumber(value))
		text = text .. stack["id"] .. ":" .. stack["dmg"] .. "%" .. stack["qty"] .. ";"
	end
	file.write(text)
	file.close()
	return
end

if(tArgs[1] == "run") then
	main()
	return
end

printError("The first argument is wrong")
