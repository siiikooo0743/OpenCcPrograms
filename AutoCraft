--[[
	AutoCraft
	
	Copyright (C) 2016 siiikooo0743
	
	This programm is part of the OpenCcPrograms-project and licensed under the GPLv3, 
	see LicenseDetails for more details and LICENSE for the complete license.
	
	Author: siiikooo0743
	Website: https://github.com/siiikooo0743/OpenCcPrograms
	Version 0.8.3
	
	This is a autocrafting routine. A big enough chest should be infront of the turtle. The turtle needs to face EAST.
	A Item is descibed by item_id:dmg_value
	
	The file patterns is requiered to sit in .crafting/patterns.
	
]]

chest = peripheral.wrap("front")
os.loadAPI(".crafting/patterns")
reservedItems = {}

function getExtendedID(item)
  return item["id"] .. ":" .. item["dmg"]
end

function getItems(items, amount)
  chest.condenseItems()
  for slot = 1, 9, 1 do    
    if items[slot] ~= nil then
      found = false
      while not found do
        allItems = chest.getAllStacks(false)
        for chestSlot, item in pairs(allItems) do
          if  getExtendedID(item) == items[slot]  and item["qty"] >= amount then
            found = true
            tmpSlot = slot
            if slot > 3 then
              tmpSlot = tmpSlot + 1
            end
            
            if slot > 6 then
              tmpSlot = tmpSlot + 1
            end
            
            chest.pushItemIntoSlot("WEST",chestSlot,amount, slot)
            break
	        end
        end
        if(not found) then
          print("What? Hey! A item dissapeared! Missing " .. items[slot] .. ". I need " .. amount .. " of them!")
          sleep(10)
        end
      end
    end
  end
end

function findOrMakeItem(item, amount)
  while true do
  
    chest.condenseItems()
    allItems = chest.getAllStacks(false)
  
    need = amount
  
    --Check for reserved
    for resItem, resAmount in pairs(reservedItems) do
      if resItem == item then
        need = need + resAmount
      end
    end
  
    if reservedItems[item] == nil then
	    reservedItems[item] = 0
	  end
    reservedItems[item] = reservedItems[item] + amount
  
    for chestSlot, chestItem in pairs(allItems) do
      if getExtendedID(chestItem) == item  then
        need = need - chestItem["qty"]
      end
      
      if need <= 0 then
        return true
      end
    end
  
    recipe = patterns.getRecipe(item)
  
    recipesNeeded = math.ceil(need / recipe["amount"])
  
    if recipe ~= nil then
      for _,subItem in pairs(recipe) do
        findOrMakeItem(subItem, recipesNeeded)
      end
      
      getItems(recipesNeeded, need)
      turtle.select(16)
      turtle.craft()
      turtle.drop()
      return true
    end
  
    print("Missing " .. need .. " of ".. item .. ".")
    sleep(10)
  end 
end

tArgs = { ... }

if #tArgs ~= 2 then
  print("NEED 2 params. (item and amount)")
end

findOrMakeItem(tArgs[1], tonumber(tArgs[2]))

