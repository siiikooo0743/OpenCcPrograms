--[[
	TripleMeatTreat
	
	Copyright (C) 2015 siiikooo0743
	
	This programm is part of the OpenCcPrograms-project and licensed under the GPLv3, 
	see LicenseDetails for more details and LICENSE for the complete license.
	
	Author: siiikooo0743
	Website: https://github.com/siiikooo0743/OpenCcPrograms
	
	This is a program, to farm the three types of meet, to make Thaumcrafts "Tripple Meat Treat"
	I am not sure if it works still.
]]

BEEF = 6
PORK = 5
CHIC = 4
BEEF_RAW = 3
PORK_RAW = 2
CHIC_RAW = 1

COW = 2
PIG = 1
CHI = 0

R_currOut = 0
L_currOut = 0

D_Chic = false
D_Pork = false
D_Beef = false

spawnA = {}
spawnA[0] = false
spawnA[1] = false
spawnA[2] = false
dumbA = {}
dumbA[0] = false
dumbA[1] = false
dumbA[2] = false
dumbA[3] = false
dumbA[4] = false
dumbA[5] = false
dumbA[6] = false


mon = peripheral.wrap("monitor_0")

--#########
function getColor(count)
  return(2 ^ count)
end


--AutoSpawner are inverted
--_a = animal; _b = bool(on/off)

function spawn(_a, _b)
  spawnA[_a] = _b
  if(_b) then
    colors.subtract(L_currOut, getColor(_a))
  else
    colors.combine(L_currOut, getColor(_a))
  end
  rs.setBundledOutput("left", L_currOut)
end

--###########

--_m = MeetType

function getFillage(_m)
  return(colors.test(rs.getBundledInput("bottom"), getColor(_m)))
end

function dumb(_m)
  dumbA[_m] = true
  
  if(_m < 4) then
    dumbA[_m + 3] = false
  end
  if(_m > 3) then
    dumbA[_m - 3] = false
  end
  
  
  
  colors.combine(R_currOut, getColor(_m))
end

--###########

function checkRaw()
  cowF = getFillage(BEEF_RAW)
  pigF = getFillage(PORK_RAW)
  chiF = getFillage(CHIC_RAW)
  spawn(COW, cowF)
  spawn(PIG, pigF)
  spawn(CHI, chiF)
end

function checkNuggets()
  if not (getFillage(BEEF)) then
    dumb(BEEF_RAW)
    D_Beef = false
  else
    D_Beef = true
  end
  
  if not (getFillage(PORK)) then
    dumb(PORK_RAW)
    D_Pork = false
  else
    D_Pork = true
  end
  
  if not (getFillage(CHIC))then
    dumb(CHIC_RAW)
    D_Chic = false
  else
    D_Chic = true
  end
  
  if(D_Chic and D_Pork and D_Beef) then
    dumb(CHIC)
    dumb(PORK)
    dumb(BEEF)
  end
  
  rs.setBundledOutput("right", R_currOut)
end
--###########
  function printM(_text)
    mon.write(_text)
    x, y = mon.getCursorPos()
    mon.setCursorPos(1, y + 1)
  end
--###########
  function report()
    mon.clear()
    mon.setCursorPos(1,1)
    
    printM("Spawning:")
    
    if(spawnA[0]) then
      printM(" Chicken");
    end
    if(spawnA[1]) then
      printM(" Pig");
    end
    if(spawnA[2]) then
      printM(" Cow");
    end
    
    printM("")
    printM("Pumping out:")
    
    if(dumbA[1]) then
      printM(" Raw Chicken");
    end
    if(dumbA[2]) then
      printM(" Raw Porkchop");
    end
    if(dumbA[3]) then
      printM(" Raw Beef");
    end
    if(dumbA[4]) then
      print(" Ingredients");
    end
    
    printM("")
    printM("Ready for Pumpout:")
    
    if(D_Chic) then
      printM(" Chicken Nuggets")
    end
    if(D_Pork) then
      printM(" Pork Nuggets")
    end
    if(D_Beef) then
      printM(" Beef Nuggets")
    end
    
  end
--###########

mon.setBackgroundColor(colors.white)
mon.setTextColor(colors.black)

while true do
  checkNuggets()
  checkRaw()
  report()
  sleep(2)
  rs.setBundledOutput("right", 0)
  sleep(60)
end
